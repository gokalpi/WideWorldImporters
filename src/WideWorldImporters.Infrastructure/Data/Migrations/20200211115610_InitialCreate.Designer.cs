// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WideWorldImporters.Infrastructure.Data;

namespace WideWorldImporters.Infrastructure.Data.Migrations
{
    [DbContext(typeof(WideWorldImportersContext))]
    [Migration("20200211115610_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:Sequences.BuyingGroupID", "'BuyingGroupID', 'Sequences', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:Sequences.CityID", "'CityID', 'Sequences', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:Sequences.ColdRoomTemperatureID", "'ColdRoomTemperatureID', 'Sequences', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:Sequences.ColorID", "'ColorID', 'Sequences', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:Sequences.CountryID", "'CountryID', 'Sequences', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:Sequences.CustomerCategoryID", "'CustomerCategoryID', 'Sequences', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:Sequences.CustomerID", "'CustomerID', 'Sequences', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:Sequences.DeliveryMethodID", "'DeliveryMethodID', 'Sequences', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:Sequences.InvoiceID", "'InvoiceID', 'Sequences', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:Sequences.InvoiceLineID", "'InvoiceLineID', 'Sequences', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:Sequences.OrderID", "'OrderID', 'Sequences', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:Sequences.OrderLineID", "'OrderLineID', 'Sequences', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:Sequences.PackageTypeID", "'PackageTypeID', 'Sequences', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:Sequences.PaymentMethodID", "'PaymentMethodID', 'Sequences', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:Sequences.PersonID", "'PersonID', 'Sequences', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:Sequences.PurchaseOrderID", "'PurchaseOrderID', 'Sequences', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:Sequences.PurchaseOrderLineID", "'PurchaseOrderLineID', 'Sequences', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:Sequences.SpecialDealID", "'SpecialDealID', 'Sequences', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:Sequences.StateProvinceID", "'StateProvinceID', 'Sequences', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:Sequences.StockGroupID", "'StockGroupID', 'Sequences', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:Sequences.StockItemID", "'StockItemID', 'Sequences', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:Sequences.StockItemStockGroupID", "'StockItemStockGroupID', 'Sequences', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:Sequences.SupplierCategoryID", "'SupplierCategoryID', 'Sequences', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:Sequences.SupplierID", "'SupplierID', 'Sequences', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:Sequences.SystemParameterID", "'SystemParameterID', 'Sequences', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:Sequences.TransactionID", "'TransactionID', 'Sequences', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:Sequences.TransactionTypeID", "'TransactionTypeID', 'Sequences', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:Sequences.VehicleTemperatureID", "'VehicleTemperatureID', 'Sequences', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Application.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CityID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[CityID])");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<long?>("LatestRecordedPopulation")
                        .HasColumnType("bigint");

                    b.Property<int>("StateProvinceId")
                        .HasColumnName("StateProvinceID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_Application_Cities");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex("StateProvinceId")
                        .HasName("FK_Application_Cities_StateProvinceID");

                    b.ToTable("Cities","Application");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Application.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CountryID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[CountryID])");

                    b.Property<string>("Continent")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("CountryType")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("FormalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("IsoAlpha3Code")
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<int?>("IsoNumericCode")
                        .HasColumnType("int");

                    b.Property<int?>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<long?>("LatestRecordedPopulation")
                        .HasColumnType("bigint");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Subregion")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_Application_Countries");

                    b.HasIndex("CountryName")
                        .IsUnique()
                        .HasName("UQ_Application_Countries_CountryName");

                    b.HasIndex("FormalName")
                        .IsUnique()
                        .HasName("UQ_Application_Countries_FormalName");

                    b.HasIndex("LastEditedBy");

                    b.ToTable("Countries","Application");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Application.DeliveryMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeliveryMethodID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[DeliveryMethodID])");

                    b.Property<string>("DeliveryMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_Application_DeliveryMethods");

                    b.HasIndex("DeliveryMethodName")
                        .IsUnique()
                        .HasName("UQ_Application_DeliveryMethods_DeliveryMethodName");

                    b.HasIndex("LastEditedBy");

                    b.ToTable("DeliveryMethods","Application");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Application.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PaymentMethodID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[PaymentMethodID])");

                    b.Property<int?>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_Application_PaymentMethods");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex("PaymentMethodName")
                        .IsUnique()
                        .HasName("UQ_Application_PaymentMethods_PaymentMethodName");

                    b.ToTable("PaymentMethods","Application");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Application.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PersonID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[PersonID])");

                    b.Property<string>("CustomFields")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("FaxNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("HashedPassword")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExternalLogonProvider")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPermittedToLogon")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSalesperson")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemUser")
                        .HasColumnType("bit");

                    b.Property<int?>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<string>("LogonName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("OtherLanguages")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("(json_query([CustomFields],N'$.OtherLanguages'))");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PreferredName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SearchName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(101)")
                        .HasComputedColumnSql("(concat([PreferredName],N' ',[FullName]))")
                        .HasMaxLength(101);

                    b.Property<string>("UserPreferences")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_Application_People");

                    b.HasIndex("FullName")
                        .HasName("IX_Application_People_FullName");

                    b.HasIndex("IsEmployee")
                        .HasName("IX_Application_People_IsEmployee");

                    b.HasIndex("IsSalesperson")
                        .HasName("IX_Application_People_IsSalesperson");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex("FullName", "EmailAddress", "IsPermittedToLogon", "Id")
                        .HasName("IX_Application_People_Perf_20160301_05");

                    b.ToTable("People","Application");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Application.StateProvince", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StateProvinceID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[StateProvinceID])");

                    b.Property<int>("CountryId")
                        .HasColumnName("CountryID")
                        .HasColumnType("int");

                    b.Property<int?>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<long?>("LatestRecordedPopulation")
                        .HasColumnType("bigint");

                    b.Property<string>("SalesTerritory")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("StateProvinceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<string>("StateProvinceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_Application_StateProvinces");

                    b.HasIndex("CountryId")
                        .HasName("FK_Application_StateProvinces_CountryID");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex("SalesTerritory")
                        .HasName("IX_Application_StateProvinces_SalesTerritory");

                    b.HasIndex("StateProvinceName")
                        .IsUnique()
                        .HasName("UQ_Application_StateProvinces_StateProvinceName");

                    b.ToTable("StateProvinces","Application");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Application.SystemParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SystemParameterID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[SystemParameterID])");

                    b.Property<string>("ApplicationSettings")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryAddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("DeliveryAddressLine2")
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<int>("DeliveryCityId")
                        .HasColumnName("DeliveryCityID")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastEditedWhen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("PostalAddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("PostalAddressLine2")
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<int>("PostalCityId")
                        .HasColumnName("PostalCityID")
                        .HasColumnType("int");

                    b.Property<string>("PostalPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id")
                        .HasName("PK_Application_SystemParameters");

                    b.HasIndex("DeliveryCityId")
                        .HasName("FK_Application_SystemParameters_DeliveryCityID");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex("PostalCityId")
                        .HasName("FK_Application_SystemParameters_PostalCityID");

                    b.ToTable("SystemParameters","Application");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Application.TransactionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TransactionTypeID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[TransactionTypeID])");

                    b.Property<int?>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<string>("TransactionTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_Application_TransactionTypes");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex("TransactionTypeName")
                        .IsUnique()
                        .HasName("UQ_Application_TransactionTypes_TransactionTypeName");

                    b.ToTable("TransactionTypes","Application");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Puchasing.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PurchaseOrderID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[PurchaseOrderID])");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContactPersonId")
                        .HasColumnName("ContactPersonID")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryMethodId")
                        .HasColumnName("DeliveryMethodID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("date");

                    b.Property<string>("InternalComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOrderFinalized")
                        .HasColumnType("bit");

                    b.Property<int?>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastEditedWhen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("date");

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.Property<string>("SupplierReference")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id")
                        .HasName("PK_Purchasing_PurchaseOrders");

                    b.HasIndex("ContactPersonId")
                        .HasName("FK_Purchasing_PurchaseOrders_ContactPersonID");

                    b.HasIndex("DeliveryMethodId")
                        .HasName("FK_Purchasing_PurchaseOrders_DeliveryMethodID");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex("SupplierId")
                        .HasName("FK_Purchasing_PurchaseOrders_SupplierID");

                    b.ToTable("PurchaseOrders","Purchasing");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Puchasing.PurchaseOrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PurchaseOrderLineID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[PurchaseOrderLineID])");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("ExpectedUnitPricePerOuter")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsOrderLineFinalized")
                        .HasColumnType("bit");

                    b.Property<int?>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastEditedWhen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateTime?>("LastReceiptDate")
                        .HasColumnType("date");

                    b.Property<int>("OrderedOuters")
                        .HasColumnType("int");

                    b.Property<int>("PackageTypeId")
                        .HasColumnName("PackageTypeID")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnName("PurchaseOrderID")
                        .HasColumnType("int");

                    b.Property<int>("ReceivedOuters")
                        .HasColumnType("int");

                    b.Property<int>("StockItemId")
                        .HasColumnName("StockItemID")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Purchasing_PurchaseOrderLines");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex("PackageTypeId")
                        .HasName("FK_Purchasing_PurchaseOrderLines_PackageTypeID");

                    b.HasIndex("PurchaseOrderId")
                        .HasName("FK_Purchasing_PurchaseOrderLines_PurchaseOrderID");

                    b.HasIndex("StockItemId")
                        .HasName("FK_Purchasing_PurchaseOrderLines_StockItemID");

                    b.HasIndex("OrderedOuters", "ReceivedOuters", "IsOrderLineFinalized", "StockItemId")
                        .HasName("IX_Purchasing_PurchaseOrderLines_Perf_20160301_4");

                    b.ToTable("PurchaseOrderLines","Purchasing");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Puchasing.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[SupplierID])");

                    b.Property<int>("AlternateContactPersonId")
                        .HasColumnName("AlternateContactPersonID")
                        .HasColumnType("int");

                    b.Property<string>("BankAccountBranch")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BankAccountCode")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("BankAccountName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("BankInternationalCode")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("DeliveryAddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("DeliveryAddressLine2")
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<int>("DeliveryCityId")
                        .HasColumnName("DeliveryCityID")
                        .HasColumnType("int");

                    b.Property<int?>("DeliveryMethodId")
                        .HasColumnName("DeliveryMethodID")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("FaxNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("InternalComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("PaymentDays")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("PostalAddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("PostalAddressLine2")
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<int>("PostalCityId")
                        .HasColumnName("PostalCityID")
                        .HasColumnType("int");

                    b.Property<string>("PostalPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("PrimaryContactPersonId")
                        .HasColumnName("PrimaryContactPersonID")
                        .HasColumnType("int");

                    b.Property<int>("SupplierCategoryId")
                        .HasColumnName("SupplierCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SupplierReference")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasColumnName("WebsiteURL")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("PK_Purchasing_Suppliers");

                    b.HasIndex("AlternateContactPersonId")
                        .HasName("FK_Purchasing_Suppliers_AlternateContactPersonID");

                    b.HasIndex("DeliveryCityId")
                        .HasName("FK_Purchasing_Suppliers_DeliveryCityID");

                    b.HasIndex("DeliveryMethodId")
                        .HasName("FK_Purchasing_Suppliers_DeliveryMethodID");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex("PostalCityId")
                        .HasName("FK_Purchasing_Suppliers_PostalCityID");

                    b.HasIndex("PrimaryContactPersonId")
                        .HasName("FK_Purchasing_Suppliers_PrimaryContactPersonID");

                    b.HasIndex("SupplierCategoryId")
                        .HasName("FK_Purchasing_Suppliers_SupplierCategoryID");

                    b.HasIndex("SupplierName")
                        .IsUnique()
                        .HasName("UQ_Purchasing_Suppliers_SupplierName");

                    b.ToTable("Suppliers","Purchasing");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Puchasing.SupplierCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierCategoryID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[SupplierCategoryID])");

                    b.Property<int?>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<string>("SupplierCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_Purchasing_SupplierCategories");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex("SupplierCategoryName")
                        .IsUnique()
                        .HasName("UQ_Purchasing_SupplierCategories_SupplierCategoryName");

                    b.ToTable("SupplierCategories","Purchasing");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Puchasing.SupplierTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierTransactionID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[TransactionID])");

                    b.Property<decimal>("AmountExcludingTax")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("FinalizationDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsFinalized")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit")
                        .HasComputedColumnSql("(case when [FinalizationDate] IS NULL then CONVERT([bit],(0)) else CONVERT([bit],(1)) end)");

                    b.Property<int?>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastEditedWhen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<decimal>("OutstandingBalance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnName("PaymentMethodID")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnName("PurchaseOrderID")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.Property<string>("SupplierInvoiceNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TransactionAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("date");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnName("TransactionTypeID")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Purchasing_SupplierTransactions");

                    b.HasIndex("IsFinalized")
                        .HasName("IX_Purchasing_SupplierTransactions_IsFinalized");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex("PaymentMethodId")
                        .HasName("FK_Purchasing_SupplierTransactions_PaymentMethodID");

                    b.HasIndex("PurchaseOrderId")
                        .HasName("FK_Purchasing_SupplierTransactions_PurchaseOrderID");

                    b.HasIndex("SupplierId")
                        .HasName("FK_Purchasing_SupplierTransactions_SupplierID");

                    b.HasIndex("TransactionTypeId")
                        .HasName("FK_Purchasing_SupplierTransactions_TransactionTypeID");

                    b.ToTable("SupplierTransactions","Purchasing");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Sales.BuyingGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BuyingGroupID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[BuyingGroupID])");

                    b.Property<string>("BuyingGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_Sales_BuyingGroups");

                    b.HasIndex("BuyingGroupName")
                        .IsUnique()
                        .HasName("UQ_Sales_BuyingGroups_BuyingGroupName");

                    b.HasIndex("LastEditedBy");

                    b.ToTable("BuyingGroups","Sales");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Sales.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CustomerID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[CustomerID])");

                    b.Property<DateTime>("AccountOpenedDate")
                        .HasColumnType("date");

                    b.Property<int?>("AlternateContactPersonId")
                        .HasColumnName("AlternateContactPersonID")
                        .HasColumnType("int");

                    b.Property<int>("BillToCustomerId")
                        .HasColumnName("BillToCustomerID")
                        .HasColumnType("int");

                    b.Property<int?>("BuyingGroupId")
                        .HasColumnName("BuyingGroupID")
                        .HasColumnType("int");

                    b.Property<decimal?>("CreditLimit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("CustomerCategoryId")
                        .HasColumnName("CustomerCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("DeliveryAddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("DeliveryAddressLine2")
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<int>("DeliveryCityId")
                        .HasColumnName("DeliveryCityID")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryMethodId")
                        .HasColumnName("DeliveryMethodID")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("DeliveryRun")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<string>("FaxNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("IsOnCreditHold")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatementSent")
                        .HasColumnType("bit");

                    b.Property<int?>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("PaymentDays")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("PostalAddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("PostalAddressLine2")
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<int>("PostalCityId")
                        .HasColumnName("PostalCityID")
                        .HasColumnType("int");

                    b.Property<string>("PostalPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("PrimaryContactPersonId")
                        .HasColumnName("PrimaryContactPersonID")
                        .HasColumnType("int");

                    b.Property<string>("RunPosition")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<decimal>("StandardDiscountPercentage")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasColumnName("WebsiteURL")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("PK_Sales_Customers");

                    b.HasIndex("AlternateContactPersonId")
                        .HasName("FK_Sales_Customers_AlternateContactPersonID");

                    b.HasIndex("BillToCustomerId");

                    b.HasIndex("BuyingGroupId")
                        .HasName("FK_Sales_Customers_BuyingGroupID");

                    b.HasIndex("CustomerCategoryId")
                        .HasName("FK_Sales_Customers_CustomerCategoryID");

                    b.HasIndex("CustomerName")
                        .IsUnique()
                        .HasName("UQ_Sales_Customers_CustomerName");

                    b.HasIndex("DeliveryCityId")
                        .HasName("FK_Sales_Customers_DeliveryCityID");

                    b.HasIndex("DeliveryMethodId")
                        .HasName("FK_Sales_Customers_DeliveryMethodID");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex("PostalCityId")
                        .HasName("FK_Sales_Customers_PostalCityID");

                    b.HasIndex("PrimaryContactPersonId")
                        .HasName("FK_Sales_Customers_PrimaryContactPersonID");

                    b.HasIndex("PrimaryContactPersonId", "IsOnCreditHold", "Id", "BillToCustomerId")
                        .HasName("IX_Sales_Customers_Perf_20160301_06");

                    b.ToTable("Customers","Sales");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Sales.CustomerCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CustomerCategoryID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[CustomerCategoryID])");

                    b.Property<string>("CustomerCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_Sales_CustomerCategories");

                    b.HasIndex("CustomerCategoryName")
                        .IsUnique()
                        .HasName("UQ_Sales_CustomerCategories_CustomerCategoryName");

                    b.HasIndex("LastEditedBy");

                    b.ToTable("CustomerCategories","Sales");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Sales.CustomerTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CustomerTransactionID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[TransactionID])");

                    b.Property<decimal>("AmountExcludingTax")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FinalizationDate")
                        .HasColumnType("date");

                    b.Property<int?>("InvoiceId")
                        .HasColumnName("InvoiceID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsFinalized")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit")
                        .HasComputedColumnSql("(case when [FinalizationDate] IS NULL then CONVERT([bit],(0)) else CONVERT([bit],(1)) end)");

                    b.Property<int?>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastEditedWhen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<decimal>("OutstandingBalance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnName("PaymentMethodID")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TransactionAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("date");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnName("TransactionTypeID")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Sales_CustomerTransactions");

                    b.HasIndex("CustomerId")
                        .HasName("FK_Sales_CustomerTransactions_CustomerID");

                    b.HasIndex("InvoiceId")
                        .HasName("FK_Sales_CustomerTransactions_InvoiceID");

                    b.HasIndex("IsFinalized")
                        .HasName("IX_Sales_CustomerTransactions_IsFinalized");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex("PaymentMethodId")
                        .HasName("FK_Sales_CustomerTransactions_PaymentMethodID");

                    b.HasIndex("TransactionTypeId")
                        .HasName("FK_Sales_CustomerTransactions_TransactionTypeID");

                    b.ToTable("CustomerTransactions","Sales");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Sales.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InvoiceID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[InvoiceID])");

                    b.Property<int>("AccountsPersonId")
                        .HasColumnName("AccountsPersonID")
                        .HasColumnType("int");

                    b.Property<int>("BillToCustomerId")
                        .HasColumnName("BillToCustomerID")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ConfirmedDeliveryTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("(TRY_CONVERT([datetime2](7),json_value([ReturnedDeliveryData],N'$.DeliveredWhen'),(126)))");

                    b.Property<string>("ConfirmedReceivedBy")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(4000)")
                        .HasComputedColumnSql("(json_value([ReturnedDeliveryData],N'$.ReceivedBy'))")
                        .HasMaxLength(4000);

                    b.Property<int>("ContactPersonId")
                        .HasColumnName("ContactPersonID")
                        .HasColumnType("int");

                    b.Property<string>("CreditNoteReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("CustomerPurchaseOrderNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("DeliveryInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeliveryMethodId")
                        .HasColumnName("DeliveryMethodID")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryRun")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<string>("InternalComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsCreditNote")
                        .HasColumnType("bit");

                    b.Property<int?>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastEditedWhen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int?>("OrderId")
                        .HasColumnName("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("PackedByPersonId")
                        .HasColumnName("PackedByPersonID")
                        .HasColumnType("int");

                    b.Property<string>("ReturnedDeliveryData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RunPosition")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<int>("SalespersonPersonId")
                        .HasColumnName("SalespersonPersonID")
                        .HasColumnType("int");

                    b.Property<int>("TotalChillerItems")
                        .HasColumnType("int");

                    b.Property<int>("TotalDryItems")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Sales_Invoices");

                    b.HasIndex("AccountsPersonId")
                        .HasName("FK_Sales_Invoices_AccountsPersonID");

                    b.HasIndex("BillToCustomerId")
                        .HasName("FK_Sales_Invoices_BillToCustomerID");

                    b.HasIndex("ContactPersonId")
                        .HasName("FK_Sales_Invoices_ContactPersonID");

                    b.HasIndex("CustomerId")
                        .HasName("FK_Sales_Invoices_CustomerID");

                    b.HasIndex("DeliveryMethodId")
                        .HasName("FK_Sales_Invoices_DeliveryMethodID");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex("OrderId")
                        .HasName("FK_Sales_Invoices_OrderID");

                    b.HasIndex("PackedByPersonId")
                        .HasName("FK_Sales_Invoices_PackedByPersonID");

                    b.HasIndex("SalespersonPersonId")
                        .HasName("FK_Sales_Invoices_SalespersonPersonID");

                    b.HasIndex("ConfirmedReceivedBy", "ConfirmedDeliveryTime")
                        .HasName("IX_Sales_Invoices_ConfirmedDeliveryTime");

                    b.ToTable("Invoices","Sales");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Sales.InvoiceLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InvoiceLineID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[InvoiceLineID])");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal>("ExtendedPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("InvoiceId")
                        .HasColumnName("InvoiceID")
                        .HasColumnType("int");

                    b.Property<int?>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastEditedWhen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<decimal>("LineProfit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("PackageTypeId")
                        .HasColumnName("PackageTypeID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StockItemId")
                        .HasColumnName("StockItemID")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id")
                        .HasName("PK_Sales_InvoiceLines");

                    b.HasIndex("InvoiceId")
                        .HasName("FK_Sales_InvoiceLines_InvoiceID");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex("PackageTypeId")
                        .HasName("FK_Sales_InvoiceLines_PackageTypeID");

                    b.HasIndex("StockItemId")
                        .HasName("FK_Sales_InvoiceLines_StockItemID");

                    b.ToTable("InvoiceLines","Sales");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Sales.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[OrderID])");

                    b.Property<int?>("BackorderOrderId")
                        .HasColumnName("BackorderOrderID")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContactPersonId")
                        .HasColumnName("ContactPersonID")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("CustomerPurchaseOrderNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("DeliveryInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedDeliveryDate")
                        .HasColumnType("date");

                    b.Property<string>("InternalComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUndersupplyBackordered")
                        .HasColumnType("bit");

                    b.Property<int?>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastEditedWhen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("date");

                    b.Property<int?>("PickedByPersonId")
                        .HasColumnName("PickedByPersonID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PickingCompletedWhen")
                        .HasColumnType("datetime2");

                    b.Property<int>("SalespersonPersonId")
                        .HasColumnName("SalespersonPersonID")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Sales_Orders");

                    b.HasIndex("BackorderOrderId");

                    b.HasIndex("ContactPersonId")
                        .HasName("FK_Sales_Orders_ContactPersonID");

                    b.HasIndex("CustomerId")
                        .HasName("FK_Sales_Orders_CustomerID");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex("PickedByPersonId")
                        .HasName("FK_Sales_Orders_PickedByPersonID");

                    b.HasIndex("SalespersonPersonId")
                        .HasName("FK_Sales_Orders_SalespersonPersonID");

                    b.ToTable("Orders","Sales");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Sales.OrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderLineID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[OrderLineID])");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastEditedWhen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("OrderId")
                        .HasColumnName("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("PackageTypeId")
                        .HasColumnName("PackageTypeID")
                        .HasColumnType("int");

                    b.Property<int>("PickedQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PickingCompletedWhen")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StockItemId")
                        .HasColumnName("StockItemID")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id")
                        .HasName("PK_Sales_OrderLines");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex("OrderId")
                        .HasName("FK_Sales_OrderLines_OrderID");

                    b.HasIndex("PackageTypeId")
                        .HasName("FK_Sales_OrderLines_PackageTypeID");

                    b.HasIndex("StockItemId");

                    b.HasIndex("PickedQuantity", "StockItemId")
                        .HasName("IX_Sales_OrderLines_AllocatedStockItems");

                    b.HasIndex("OrderId", "PickedQuantity", "StockItemId", "PickingCompletedWhen")
                        .HasName("IX_Sales_OrderLines_Perf_20160301_02");

                    b.HasIndex("Quantity", "StockItemId", "PickingCompletedWhen", "OrderId", "Id")
                        .HasName("IX_Sales_OrderLines_Perf_20160301_01");

                    b.ToTable("OrderLines","Sales");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Sales.SpecialDeal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SpecialDealID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[SpecialDealID])");

                    b.Property<int?>("BuyingGroupId")
                        .HasColumnName("BuyingGroupID")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerCategoryId")
                        .HasColumnName("CustomerCategoryID")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnName("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("DealDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastEditedWhen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("StockGroupId")
                        .HasColumnName("StockGroupID")
                        .HasColumnType("int");

                    b.Property<int?>("StockItemId")
                        .HasColumnName("StockItemID")
                        .HasColumnType("int");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id")
                        .HasName("PK_Sales_SpecialDeals");

                    b.HasIndex("BuyingGroupId")
                        .HasName("FK_Sales_SpecialDeals_BuyingGroupID");

                    b.HasIndex("CustomerCategoryId")
                        .HasName("FK_Sales_SpecialDeals_CustomerCategoryID");

                    b.HasIndex("CustomerId")
                        .HasName("FK_Sales_SpecialDeals_CustomerID");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex("StockGroupId")
                        .HasName("FK_Sales_SpecialDeals_StockGroupID");

                    b.HasIndex("StockItemId")
                        .HasName("FK_Sales_SpecialDeals_StockItemID");

                    b.ToTable("SpecialDeals","Sales");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Warehouse.ColdRoomTemperature", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ColdRoomTemperatureID")
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[ColdRoomTemperatureID])");

                    b.Property<int>("ColdRoomSensorNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordedWhen")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Temperature")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_Warehouse_ColdRoomTemperatures");

                    b.HasIndex("ColdRoomSensorNumber")
                        .HasName("IX_Warehouse_ColdRoomTemperatures_ColdRoomSensorNumber");

                    b.ToTable("ColdRoomTemperatures","Warehouse");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Warehouse.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ColorID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[ColorID])");

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_Warehouse_Colors");

                    b.HasIndex("ColorName")
                        .IsUnique()
                        .HasName("UQ_Warehouse_Colors_ColorName");

                    b.HasIndex("LastEditedBy");

                    b.ToTable("Colors","Warehouse");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Warehouse.PackageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PackageTypeID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[PackageTypeID])");

                    b.Property<int?>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<string>("PackageTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_Warehouse_PackageTypes");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex("PackageTypeName")
                        .IsUnique()
                        .HasName("UQ_Warehouse_PackageTypes_PackageTypeName");

                    b.ToTable("PackageTypes","Warehouse");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Warehouse.StockGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StockGroupID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[StockGroupID])");

                    b.Property<int?>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<string>("StockGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_Warehouse_StockGroups");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex("StockGroupName")
                        .IsUnique()
                        .HasName("UQ_Warehouse_StockGroups_StockGroupName");

                    b.ToTable("StockGroups","Warehouse");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Warehouse.StockItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StockItemID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[StockItemID])");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("ColorId")
                        .HasColumnName("ColorID")
                        .HasColumnType("int");

                    b.Property<string>("CustomFields")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsChillerStock")
                        .HasColumnType("bit");

                    b.Property<int?>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LeadTimeDays")
                        .HasColumnType("int");

                    b.Property<string>("MarketingComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OuterPackageId")
                        .HasColumnName("OuterPackageID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("QuantityPerOuter")
                        .HasColumnType("int");

                    b.Property<decimal?>("RecommendedRetailPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SearchDetails")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("(concat([StockItemName],N' ',[MarketingComments]))");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("StockItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("(json_query([CustomFields],N'$.Tags'))");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("TypicalWeightPerUnit")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int>("UnitPackageId")
                        .HasColumnName("UnitPackageID")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_Warehouse_StockItems");

                    b.HasIndex("ColorId")
                        .HasName("FK_Warehouse_StockItems_ColorID");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex("OuterPackageId")
                        .HasName("FK_Warehouse_StockItems_OuterPackageID");

                    b.HasIndex("StockItemName")
                        .IsUnique()
                        .HasName("UQ_Warehouse_StockItems_StockItemName");

                    b.HasIndex("SupplierId")
                        .HasName("FK_Warehouse_StockItems_SupplierID");

                    b.HasIndex("UnitPackageId")
                        .HasName("FK_Warehouse_StockItems_UnitPackageID");

                    b.ToTable("StockItems","Warehouse");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Warehouse.StockItemHolding", b =>
                {
                    b.Property<int>("StockItemId")
                        .HasColumnName("StockItemID")
                        .HasColumnType("int");

                    b.Property<string>("BinLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<decimal>("LastCostPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastEditedWhen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("LastStocktakeQuantity")
                        .HasColumnType("int");

                    b.Property<int>("QuantityOnHand")
                        .HasColumnType("int");

                    b.Property<int>("ReorderLevel")
                        .HasColumnType("int");

                    b.Property<int>("TargetStockLevel")
                        .HasColumnType("int");

                    b.HasKey("StockItemId")
                        .HasName("PK_Warehouse_StockItemHoldings");

                    b.HasIndex("LastEditedBy");

                    b.ToTable("StockItemHoldings","Warehouse");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Warehouse.StockItemStockGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StockItemStockGroupID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[StockItemStockGroupID])");

                    b.Property<int?>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastEditedWhen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("StockGroupId")
                        .HasColumnName("StockGroupID")
                        .HasColumnType("int");

                    b.Property<int>("StockItemId")
                        .HasColumnName("StockItemID")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Warehouse_StockItemStockGroups");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex("StockGroupId", "StockItemId")
                        .IsUnique()
                        .HasName("UQ_StockItemStockGroups_StockGroupID_Lookup");

                    b.HasIndex("StockItemId", "StockGroupId")
                        .IsUnique()
                        .HasName("UQ_StockItemStockGroups_StockItemID_Lookup");

                    b.ToTable("StockItemStockGroups","Warehouse");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Warehouse.StockItemTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StockItemTransactionID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[TransactionID])");

                    b.Property<int?>("CustomerId")
                        .HasColumnName("CustomerID")
                        .HasColumnType("int");

                    b.Property<int?>("InvoiceId")
                        .HasColumnName("InvoiceID")
                        .HasColumnType("int");

                    b.Property<int?>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastEditedWhen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnName("PurchaseOrderID")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int>("StockItemId")
                        .HasColumnName("StockItemID")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionOccurredWhen")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnName("TransactionTypeID")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Warehouse_StockItemTransactions");

                    b.HasIndex("CustomerId")
                        .HasName("FK_Warehouse_StockItemTransactions_CustomerID");

                    b.HasIndex("InvoiceId")
                        .HasName("FK_Warehouse_StockItemTransactions_InvoiceID");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex("PurchaseOrderId")
                        .HasName("FK_Warehouse_StockItemTransactions_PurchaseOrderID");

                    b.HasIndex("StockItemId")
                        .HasName("FK_Warehouse_StockItemTransactions_StockItemID");

                    b.HasIndex("SupplierId")
                        .HasName("FK_Warehouse_StockItemTransactions_SupplierID");

                    b.HasIndex("TransactionTypeId")
                        .HasName("FK_Warehouse_StockItemTransactions_TransactionTypeID");

                    b.ToTable("StockItemTransactions","Warehouse");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Warehouse.VehicleTemperature", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VehicleTemperatureID")
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Sequences].[VehicleTemperatureID])");

                    b.Property<int>("ChillerSensorNumber")
                        .HasColumnType("int");

                    b.Property<byte[]>("CompressedSensorData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FullSensorData")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsCompressed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RecordedWhen")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Temperature")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("VehicleRegistration")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id")
                        .HasName("PK_Warehouse_VehicleTemperatures");

                    b.ToTable("VehicleTemperatures","Warehouse");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Application.City", b =>
                {
                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "LastEditedByNavigation")
                        .WithMany("Cities")
                        .HasForeignKey("LastEditedBy")
                        .HasConstraintName("FK_Application_Cities_Application_People");

                    b.HasOne("WideWorldImporters.Core.Entities.Application.StateProvince", "StateProvince")
                        .WithMany("Cities")
                        .HasForeignKey("StateProvinceId")
                        .HasConstraintName("FK_Application_Cities_StateProvinceID_Application_StateProvinces")
                        .IsRequired();
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Application.Country", b =>
                {
                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "LastEditedByNavigation")
                        .WithMany("Countries")
                        .HasForeignKey("LastEditedBy")
                        .HasConstraintName("FK_Application_Countries_Application_People");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Application.DeliveryMethod", b =>
                {
                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "LastEditedByNavigation")
                        .WithMany("DeliveryMethods")
                        .HasForeignKey("LastEditedBy")
                        .HasConstraintName("FK_Application_DeliveryMethods_Application_People");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Application.PaymentMethod", b =>
                {
                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "LastEditedByNavigation")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("LastEditedBy")
                        .HasConstraintName("FK_Application_PaymentMethods_Application_People");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Application.Person", b =>
                {
                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "LastEditedByNavigation")
                        .WithMany("InverseLastEditedByNavigation")
                        .HasForeignKey("LastEditedBy")
                        .HasConstraintName("FK_Application_People_Application_People");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Application.StateProvince", b =>
                {
                    b.HasOne("WideWorldImporters.Core.Entities.Application.Country", "Country")
                        .WithMany("StateProvinces")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Application_StateProvinces_CountryID_Application_Countries")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "LastEditedByNavigation")
                        .WithMany("StateProvinces")
                        .HasForeignKey("LastEditedBy")
                        .HasConstraintName("FK_Application_StateProvinces_Application_People");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Application.SystemParameter", b =>
                {
                    b.HasOne("WideWorldImporters.Core.Entities.Application.City", "DeliveryCity")
                        .WithMany("SystemParametersDeliveryCity")
                        .HasForeignKey("DeliveryCityId")
                        .HasConstraintName("FK_Application_SystemParameters_DeliveryCityID_Application_Cities")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "LastEditedByNavigation")
                        .WithMany("SystemParameters")
                        .HasForeignKey("LastEditedBy")
                        .HasConstraintName("FK_Application_SystemParameters_Application_People");

                    b.HasOne("WideWorldImporters.Core.Entities.Application.City", "PostalCity")
                        .WithMany("SystemParametersPostalCity")
                        .HasForeignKey("PostalCityId")
                        .HasConstraintName("FK_Application_SystemParameters_PostalCityID_Application_Cities")
                        .IsRequired();
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Application.TransactionType", b =>
                {
                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "LastEditedByNavigation")
                        .WithMany("TransactionTypes")
                        .HasForeignKey("LastEditedBy")
                        .HasConstraintName("FK_Application_TransactionTypes_Application_People");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Puchasing.PurchaseOrder", b =>
                {
                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "ContactPerson")
                        .WithMany("PurchaseOrdersContactPerson")
                        .HasForeignKey("ContactPersonId")
                        .HasConstraintName("FK_Purchasing_PurchaseOrders_ContactPersonID_Application_People")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Application.DeliveryMethod", "DeliveryMethod")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("DeliveryMethodId")
                        .HasConstraintName("FK_Purchasing_PurchaseOrders_DeliveryMethodID_Application_DeliveryMethods")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "LastEditedByNavigation")
                        .WithMany("PurchaseOrdersLastEditedByNavigation")
                        .HasForeignKey("LastEditedBy")
                        .HasConstraintName("FK_Purchasing_PurchaseOrders_Application_People");

                    b.HasOne("WideWorldImporters.Core.Entities.Puchasing.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_Purchasing_PurchaseOrders_SupplierID_Purchasing_Suppliers")
                        .IsRequired();
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Puchasing.PurchaseOrderLine", b =>
                {
                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "LastEditedByNavigation")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("LastEditedBy")
                        .HasConstraintName("FK_Purchasing_PurchaseOrderLines_Application_People");

                    b.HasOne("WideWorldImporters.Core.Entities.Warehouse.PackageType", "PackageType")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("PackageTypeId")
                        .HasConstraintName("FK_Purchasing_PurchaseOrderLines_PackageTypeID_Warehouse_PackageTypes")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Puchasing.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("PurchaseOrderId")
                        .HasConstraintName("FK_Purchasing_PurchaseOrderLines_PurchaseOrderID_Purchasing_PurchaseOrders")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Warehouse.StockItem", "StockItem")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("StockItemId")
                        .HasConstraintName("FK_Purchasing_PurchaseOrderLines_StockItemID_Warehouse_StockItems")
                        .IsRequired();
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Puchasing.Supplier", b =>
                {
                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "AlternateContactPerson")
                        .WithMany("SuppliersAlternateContactPerson")
                        .HasForeignKey("AlternateContactPersonId")
                        .HasConstraintName("FK_Purchasing_Suppliers_AlternateContactPersonID_Application_People")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Application.City", "DeliveryCity")
                        .WithMany("SuppliersDeliveryCity")
                        .HasForeignKey("DeliveryCityId")
                        .HasConstraintName("FK_Purchasing_Suppliers_DeliveryCityID_Application_Cities")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Application.DeliveryMethod", "DeliveryMethod")
                        .WithMany("Suppliers")
                        .HasForeignKey("DeliveryMethodId")
                        .HasConstraintName("FK_Purchasing_Suppliers_DeliveryMethodID_Application_DeliveryMethods");

                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "LastEditedByNavigation")
                        .WithMany("SuppliersLastEditedByNavigation")
                        .HasForeignKey("LastEditedBy")
                        .HasConstraintName("FK_Purchasing_Suppliers_Application_People");

                    b.HasOne("WideWorldImporters.Core.Entities.Application.City", "PostalCity")
                        .WithMany("SuppliersPostalCity")
                        .HasForeignKey("PostalCityId")
                        .HasConstraintName("FK_Purchasing_Suppliers_PostalCityID_Application_Cities")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "PrimaryContactPerson")
                        .WithMany("SuppliersPrimaryContactPerson")
                        .HasForeignKey("PrimaryContactPersonId")
                        .HasConstraintName("FK_Purchasing_Suppliers_PrimaryContactPersonID_Application_People")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Puchasing.SupplierCategory", "SupplierCategory")
                        .WithMany("Suppliers")
                        .HasForeignKey("SupplierCategoryId")
                        .HasConstraintName("FK_Purchasing_Suppliers_SupplierCategoryID_Purchasing_SupplierCategories")
                        .IsRequired();
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Puchasing.SupplierCategory", b =>
                {
                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "LastEditedByNavigation")
                        .WithMany("SupplierCategories")
                        .HasForeignKey("LastEditedBy")
                        .HasConstraintName("FK_Purchasing_SupplierCategories_Application_People");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Puchasing.SupplierTransaction", b =>
                {
                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "LastEditedByNavigation")
                        .WithMany("SupplierTransactions")
                        .HasForeignKey("LastEditedBy")
                        .HasConstraintName("FK_Purchasing_SupplierTransactions_Application_People");

                    b.HasOne("WideWorldImporters.Core.Entities.Application.PaymentMethod", "PaymentMethod")
                        .WithMany("SupplierTransactions")
                        .HasForeignKey("PaymentMethodId")
                        .HasConstraintName("FK_Purchasing_SupplierTransactions_PaymentMethodID_Application_PaymentMethods");

                    b.HasOne("WideWorldImporters.Core.Entities.Puchasing.PurchaseOrder", "PurchaseOrder")
                        .WithMany("SupplierTransactions")
                        .HasForeignKey("PurchaseOrderId")
                        .HasConstraintName("FK_Purchasing_SupplierTransactions_PurchaseOrderID_Purchasing_PurchaseOrders");

                    b.HasOne("WideWorldImporters.Core.Entities.Puchasing.Supplier", "Supplier")
                        .WithMany("SupplierTransactions")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_Purchasing_SupplierTransactions_SupplierID_Purchasing_Suppliers")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Application.TransactionType", "TransactionType")
                        .WithMany("SupplierTransactions")
                        .HasForeignKey("TransactionTypeId")
                        .HasConstraintName("FK_Purchasing_SupplierTransactions_TransactionTypeID_Application_TransactionTypes")
                        .IsRequired();
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Sales.BuyingGroup", b =>
                {
                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "LastEditedByNavigation")
                        .WithMany("BuyingGroups")
                        .HasForeignKey("LastEditedBy")
                        .HasConstraintName("FK_Sales_BuyingGroups_Application_People");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Sales.Customer", b =>
                {
                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "AlternateContactPerson")
                        .WithMany("CustomersAlternateContactPerson")
                        .HasForeignKey("AlternateContactPersonId")
                        .HasConstraintName("FK_Sales_Customers_AlternateContactPersonID_Application_People");

                    b.HasOne("WideWorldImporters.Core.Entities.Sales.Customer", "BillToCustomer")
                        .WithMany("InverseBillToCustomer")
                        .HasForeignKey("BillToCustomerId")
                        .HasConstraintName("FK_Sales_Customers_BillToCustomerID_Sales_Customers")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Sales.BuyingGroup", "BuyingGroup")
                        .WithMany("Customers")
                        .HasForeignKey("BuyingGroupId")
                        .HasConstraintName("FK_Sales_Customers_BuyingGroupID_Sales_BuyingGroups");

                    b.HasOne("WideWorldImporters.Core.Entities.Sales.CustomerCategory", "CustomerCategory")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerCategoryId")
                        .HasConstraintName("FK_Sales_Customers_CustomerCategoryID_Sales_CustomerCategories")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Application.City", "DeliveryCity")
                        .WithMany("CustomersDeliveryCity")
                        .HasForeignKey("DeliveryCityId")
                        .HasConstraintName("FK_Sales_Customers_DeliveryCityID_Application_Cities")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Application.DeliveryMethod", "DeliveryMethod")
                        .WithMany("Customers")
                        .HasForeignKey("DeliveryMethodId")
                        .HasConstraintName("FK_Sales_Customers_DeliveryMethodID_Application_DeliveryMethods")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "LastEditedByNavigation")
                        .WithMany("CustomersLastEditedByNavigation")
                        .HasForeignKey("LastEditedBy")
                        .HasConstraintName("FK_Sales_Customers_Application_People");

                    b.HasOne("WideWorldImporters.Core.Entities.Application.City", "PostalCity")
                        .WithMany("CustomersPostalCity")
                        .HasForeignKey("PostalCityId")
                        .HasConstraintName("FK_Sales_Customers_PostalCityID_Application_Cities")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "PrimaryContactPerson")
                        .WithMany("CustomersPrimaryContactPerson")
                        .HasForeignKey("PrimaryContactPersonId")
                        .HasConstraintName("FK_Sales_Customers_PrimaryContactPersonID_Application_People")
                        .IsRequired();
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Sales.CustomerCategory", b =>
                {
                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "LastEditedByNavigation")
                        .WithMany("CustomerCategories")
                        .HasForeignKey("LastEditedBy")
                        .HasConstraintName("FK_Sales_CustomerCategories_Application_People");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Sales.CustomerTransaction", b =>
                {
                    b.HasOne("WideWorldImporters.Core.Entities.Sales.Customer", "Customer")
                        .WithMany("CustomerTransactions")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Sales_CustomerTransactions_CustomerID_Sales_Customers")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Sales.Invoice", "Invoice")
                        .WithMany("CustomerTransactions")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("FK_Sales_CustomerTransactions_InvoiceID_Sales_Invoices");

                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "LastEditedByNavigation")
                        .WithMany("CustomerTransactions")
                        .HasForeignKey("LastEditedBy")
                        .HasConstraintName("FK_Sales_CustomerTransactions_Application_People");

                    b.HasOne("WideWorldImporters.Core.Entities.Application.PaymentMethod", "PaymentMethod")
                        .WithMany("CustomerTransactions")
                        .HasForeignKey("PaymentMethodId")
                        .HasConstraintName("FK_Sales_CustomerTransactions_PaymentMethodID_Application_PaymentMethods");

                    b.HasOne("WideWorldImporters.Core.Entities.Application.TransactionType", "TransactionType")
                        .WithMany("CustomerTransactions")
                        .HasForeignKey("TransactionTypeId")
                        .HasConstraintName("FK_Sales_CustomerTransactions_TransactionTypeID_Application_TransactionTypes")
                        .IsRequired();
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Sales.Invoice", b =>
                {
                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "AccountsPerson")
                        .WithMany("InvoicesAccountsPerson")
                        .HasForeignKey("AccountsPersonId")
                        .HasConstraintName("FK_Sales_Invoices_AccountsPersonID_Application_People")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Sales.Customer", "BillToCustomer")
                        .WithMany("InvoicesBillToCustomer")
                        .HasForeignKey("BillToCustomerId")
                        .HasConstraintName("FK_Sales_Invoices_BillToCustomerID_Sales_Customers")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "ContactPerson")
                        .WithMany("InvoicesContactPerson")
                        .HasForeignKey("ContactPersonId")
                        .HasConstraintName("FK_Sales_Invoices_ContactPersonID_Application_People")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Sales.Customer", "Customer")
                        .WithMany("InvoicesCustomer")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Sales_Invoices_CustomerID_Sales_Customers")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Application.DeliveryMethod", "DeliveryMethod")
                        .WithMany("Invoices")
                        .HasForeignKey("DeliveryMethodId")
                        .HasConstraintName("FK_Sales_Invoices_DeliveryMethodID_Application_DeliveryMethods")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "LastEditedByNavigation")
                        .WithMany("InvoicesLastEditedByNavigation")
                        .HasForeignKey("LastEditedBy")
                        .HasConstraintName("FK_Sales_Invoices_Application_People");

                    b.HasOne("WideWorldImporters.Core.Entities.Sales.Order", "Order")
                        .WithMany("Invoices")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Sales_Invoices_OrderID_Sales_Orders");

                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "PackedByPerson")
                        .WithMany("InvoicesPackedByPerson")
                        .HasForeignKey("PackedByPersonId")
                        .HasConstraintName("FK_Sales_Invoices_PackedByPersonID_Application_People")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "SalespersonPerson")
                        .WithMany("InvoicesSalespersonPerson")
                        .HasForeignKey("SalespersonPersonId")
                        .HasConstraintName("FK_Sales_Invoices_SalespersonPersonID_Application_People")
                        .IsRequired();
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Sales.InvoiceLine", b =>
                {
                    b.HasOne("WideWorldImporters.Core.Entities.Sales.Invoice", "Invoice")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("FK_Sales_InvoiceLines_InvoiceID_Sales_Invoices")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "LastEditedByNavigation")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("LastEditedBy")
                        .HasConstraintName("FK_Sales_InvoiceLines_Application_People");

                    b.HasOne("WideWorldImporters.Core.Entities.Warehouse.PackageType", "PackageType")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("PackageTypeId")
                        .HasConstraintName("FK_Sales_InvoiceLines_PackageTypeID_Warehouse_PackageTypes")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Warehouse.StockItem", "StockItem")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("StockItemId")
                        .HasConstraintName("FK_Sales_InvoiceLines_StockItemID_Warehouse_StockItems")
                        .IsRequired();
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Sales.Order", b =>
                {
                    b.HasOne("WideWorldImporters.Core.Entities.Sales.Order", "BackorderOrder")
                        .WithMany("InverseBackorderOrder")
                        .HasForeignKey("BackorderOrderId")
                        .HasConstraintName("FK_Sales_Orders_BackorderOrderID_Sales_Orders");

                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "ContactPerson")
                        .WithMany("OrdersContactPerson")
                        .HasForeignKey("ContactPersonId")
                        .HasConstraintName("FK_Sales_Orders_ContactPersonID_Application_People")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Sales.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Sales_Orders_CustomerID_Sales_Customers")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "LastEditedByNavigation")
                        .WithMany("OrdersLastEditedByNavigation")
                        .HasForeignKey("LastEditedBy")
                        .HasConstraintName("FK_Sales_Orders_Application_People");

                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "PickedByPerson")
                        .WithMany("OrdersPickedByPerson")
                        .HasForeignKey("PickedByPersonId")
                        .HasConstraintName("FK_Sales_Orders_PickedByPersonID_Application_People");

                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "SalespersonPerson")
                        .WithMany("OrdersSalespersonPerson")
                        .HasForeignKey("SalespersonPersonId")
                        .HasConstraintName("FK_Sales_Orders_SalespersonPersonID_Application_People")
                        .IsRequired();
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Sales.OrderLine", b =>
                {
                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "LastEditedByNavigation")
                        .WithMany("OrderLines")
                        .HasForeignKey("LastEditedBy")
                        .HasConstraintName("FK_Sales_OrderLines_Application_People");

                    b.HasOne("WideWorldImporters.Core.Entities.Sales.Order", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Sales_OrderLines_OrderID_Sales_Orders")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Warehouse.PackageType", "PackageType")
                        .WithMany("OrderLines")
                        .HasForeignKey("PackageTypeId")
                        .HasConstraintName("FK_Sales_OrderLines_PackageTypeID_Warehouse_PackageTypes")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Warehouse.StockItem", "StockItem")
                        .WithMany("OrderLines")
                        .HasForeignKey("StockItemId")
                        .HasConstraintName("FK_Sales_OrderLines_StockItemID_Warehouse_StockItems")
                        .IsRequired();
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Sales.SpecialDeal", b =>
                {
                    b.HasOne("WideWorldImporters.Core.Entities.Sales.BuyingGroup", "BuyingGroup")
                        .WithMany("SpecialDeals")
                        .HasForeignKey("BuyingGroupId")
                        .HasConstraintName("FK_Sales_SpecialDeals_BuyingGroupID_Sales_BuyingGroups");

                    b.HasOne("WideWorldImporters.Core.Entities.Sales.CustomerCategory", "CustomerCategory")
                        .WithMany("SpecialDeals")
                        .HasForeignKey("CustomerCategoryId")
                        .HasConstraintName("FK_Sales_SpecialDeals_CustomerCategoryID_Sales_CustomerCategories");

                    b.HasOne("WideWorldImporters.Core.Entities.Sales.Customer", "Customer")
                        .WithMany("SpecialDeals")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Sales_SpecialDeals_CustomerID_Sales_Customers");

                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "LastEditedByNavigation")
                        .WithMany("SpecialDeals")
                        .HasForeignKey("LastEditedBy")
                        .HasConstraintName("FK_Sales_SpecialDeals_Application_People");

                    b.HasOne("WideWorldImporters.Core.Entities.Warehouse.StockGroup", "StockGroup")
                        .WithMany("SpecialDeals")
                        .HasForeignKey("StockGroupId")
                        .HasConstraintName("FK_Sales_SpecialDeals_StockGroupID_Warehouse_StockGroups");

                    b.HasOne("WideWorldImporters.Core.Entities.Warehouse.StockItem", "StockItem")
                        .WithMany("SpecialDeals")
                        .HasForeignKey("StockItemId")
                        .HasConstraintName("FK_Sales_SpecialDeals_StockItemID_Warehouse_StockItems");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Warehouse.Color", b =>
                {
                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "LastEditedByNavigation")
                        .WithMany("Colors")
                        .HasForeignKey("LastEditedBy")
                        .HasConstraintName("FK_Warehouse_Colors_Application_People");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Warehouse.PackageType", b =>
                {
                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "LastEditedByNavigation")
                        .WithMany("PackageTypes")
                        .HasForeignKey("LastEditedBy")
                        .HasConstraintName("FK_Warehouse_PackageTypes_Application_People");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Warehouse.StockGroup", b =>
                {
                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "LastEditedByNavigation")
                        .WithMany("StockGroups")
                        .HasForeignKey("LastEditedBy")
                        .HasConstraintName("FK_Warehouse_StockGroups_Application_People");
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Warehouse.StockItem", b =>
                {
                    b.HasOne("WideWorldImporters.Core.Entities.Warehouse.Color", "Color")
                        .WithMany("StockItems")
                        .HasForeignKey("ColorId")
                        .HasConstraintName("FK_Warehouse_StockItems_ColorID_Warehouse_Colors");

                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "LastEditedByNavigation")
                        .WithMany("StockItems")
                        .HasForeignKey("LastEditedBy")
                        .HasConstraintName("FK_Warehouse_StockItems_Application_People");

                    b.HasOne("WideWorldImporters.Core.Entities.Warehouse.PackageType", "OuterPackage")
                        .WithMany("StockItemsOuterPackage")
                        .HasForeignKey("OuterPackageId")
                        .HasConstraintName("FK_Warehouse_StockItems_OuterPackageID_Warehouse_PackageTypes")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Puchasing.Supplier", "Supplier")
                        .WithMany("StockItems")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_Warehouse_StockItems_SupplierID_Purchasing_Suppliers")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Warehouse.PackageType", "UnitPackage")
                        .WithMany("StockItemsUnitPackage")
                        .HasForeignKey("UnitPackageId")
                        .HasConstraintName("FK_Warehouse_StockItems_UnitPackageID_Warehouse_PackageTypes")
                        .IsRequired();
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Warehouse.StockItemHolding", b =>
                {
                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "LastEditedByNavigation")
                        .WithMany("StockItemHoldings")
                        .HasForeignKey("LastEditedBy")
                        .HasConstraintName("FK_Warehouse_StockItemHoldings_Application_People");

                    b.HasOne("WideWorldImporters.Core.Entities.Warehouse.StockItem", "StockItem")
                        .WithOne("StockItemHoldings")
                        .HasForeignKey("WideWorldImporters.Core.Entities.Warehouse.StockItemHolding", "StockItemId")
                        .HasConstraintName("PKFK_Warehouse_StockItemHoldings_StockItemID_Warehouse_StockItems")
                        .IsRequired();
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Warehouse.StockItemStockGroup", b =>
                {
                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "LastEditedByNavigation")
                        .WithMany("StockItemStockGroups")
                        .HasForeignKey("LastEditedBy")
                        .HasConstraintName("FK_Warehouse_StockItemStockGroups_Application_People");

                    b.HasOne("WideWorldImporters.Core.Entities.Warehouse.StockGroup", "StockGroup")
                        .WithMany("StockItemStockGroups")
                        .HasForeignKey("StockGroupId")
                        .HasConstraintName("FK_Warehouse_StockItemStockGroups_StockGroupID_Warehouse_StockGroups")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Warehouse.StockItem", "StockItem")
                        .WithMany("StockItemStockGroups")
                        .HasForeignKey("StockItemId")
                        .HasConstraintName("FK_Warehouse_StockItemStockGroups_StockItemID_Warehouse_StockItems")
                        .IsRequired();
                });

            modelBuilder.Entity("WideWorldImporters.Core.Entities.Warehouse.StockItemTransaction", b =>
                {
                    b.HasOne("WideWorldImporters.Core.Entities.Sales.Customer", "Customer")
                        .WithMany("StockItemTransactions")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Warehouse_StockItemTransactions_CustomerID_Sales_Customers");

                    b.HasOne("WideWorldImporters.Core.Entities.Sales.Invoice", "Invoice")
                        .WithMany("StockItemTransactions")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("FK_Warehouse_StockItemTransactions_InvoiceID_Sales_Invoices");

                    b.HasOne("WideWorldImporters.Core.Entities.Application.Person", "LastEditedByNavigation")
                        .WithMany("StockItemTransactions")
                        .HasForeignKey("LastEditedBy")
                        .HasConstraintName("FK_Warehouse_StockItemTransactions_Application_People");

                    b.HasOne("WideWorldImporters.Core.Entities.Puchasing.PurchaseOrder", "PurchaseOrder")
                        .WithMany("StockItemTransactions")
                        .HasForeignKey("PurchaseOrderId")
                        .HasConstraintName("FK_Warehouse_StockItemTransactions_PurchaseOrderID_Purchasing_PurchaseOrders");

                    b.HasOne("WideWorldImporters.Core.Entities.Warehouse.StockItem", "StockItem")
                        .WithMany("StockItemTransactions")
                        .HasForeignKey("StockItemId")
                        .HasConstraintName("FK_Warehouse_StockItemTransactions_StockItemID_Warehouse_StockItems")
                        .IsRequired();

                    b.HasOne("WideWorldImporters.Core.Entities.Puchasing.Supplier", "Supplier")
                        .WithMany("StockItemTransactions")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_Warehouse_StockItemTransactions_SupplierID_Purchasing_Suppliers");

                    b.HasOne("WideWorldImporters.Core.Entities.Application.TransactionType", "TransactionType")
                        .WithMany("StockItemTransactions")
                        .HasForeignKey("TransactionTypeId")
                        .HasConstraintName("FK_Warehouse_StockItemTransactions_TransactionTypeID_Application_TransactionTypes")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
